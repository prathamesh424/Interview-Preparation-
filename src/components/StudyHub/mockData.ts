import { StudyTopic, StudyQuestion, DifficultyLevel, StudyHubSection, StudyTopicStatus } from '@/types';

// Sample DSA Topics
export const dsaTopics: StudyTopic[] = [
  {
    id: 'topic-arrays',
    name: 'Arrays',
    section: 'DSA',
    description: 'Fundamental data structure for storing elements.',
    status: 'Not Started',
    questionCount: 3,
    completedCount: 0,
  },
  {
    id: 'topic-strings',
    name: 'Strings',
    section: 'DSA',
    description: 'Sequence of characters.',
    status: 'Not Started',
    questionCount: 2,
    completedCount: 0,
  },
  {
    id: 'topic-linkedlist',
    name: 'Linked Lists',
    section: 'DSA',
    description: 'Linear data structure where elements are linked.',
    status: 'Not Started',
    questionCount: 2,
    completedCount: 0,
  },
  {
    id: 'topic-trees',
    name: 'Trees',
    section: 'DSA',
    description: 'Hierarchical data structures (BST, Heaps, Tries).',
    status: 'Not Started',
    questionCount: 2, // Update count as questions are added
    completedCount: 0,
  },
  {
    id: 'topic-graphs',
    name: 'Graphs',
    section: 'DSA',
    description: 'Representing networks and connections (BFS, DFS, Shortest Path).',
    status: 'Not Started',
    questionCount: 2, // Update count as questions are added
    completedCount: 0,
  },
   {
    id: 'topic-sorting',
    name: 'Sorting Algorithms',
    section: 'DSA',
    description: 'Techniques like Bubble, Merge, Quick Sort.',
    status: 'Not Started',
    questionCount: 1, // Update count as questions are added
    completedCount: 0,
  },
  {
    id: 'topic-searching',
    name: 'Searching Algorithms',
    section: 'DSA',
    description: 'Linear Search, Binary Search.',
    status: 'Not Started',
    questionCount: 1, // Update count as questions are added
    completedCount: 0,
  },
   {
    id: 'topic-dynamic-programming',
    name: 'Dynamic Programming',
    section: 'DSA',
    description: 'Optimization technique using subproblems (Memoization, Tabulation).',
    status: 'Not Started',
    questionCount: 1, // Update count as questions are added
    completedCount: 0,
  },
];

// Sample DSA Questions (linked to topics)
export const dsaQuestions: StudyQuestion[] = [
  // Arrays
  {
    id: 'q-arr-1',
    topicId: 'topic-arrays',
    questionText: 'Find the maximum element in an array.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Iterate through the array, keeping track of the maximum element seen so far. Initialize max with the first element or negative infinity.',
    explanation: 'A simple linear scan is sufficient. Time complexity: O(n), Space complexity: O(1).',
  },
  {
    id: 'q-arr-2',
    topicId: 'topic-arrays',
    questionText: 'Reverse an array in-place.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Use two pointers, one starting at the beginning and one at the end. Swap elements and move pointers towards the center until they meet or cross.',
    explanation: 'In-place reversal avoids using extra space. Time complexity: O(n), Space complexity: O(1).',
  },
   {
    id: 'q-arr-3',
    topicId: 'topic-arrays',
    questionText: 'Find the duplicate number in an array of n+1 integers where each integer is between 1 and n (inclusive).',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Use Floyd\'s Tortoise and Hare (Cycle Detection) algorithm. Treat the array indices as nodes and values as pointers.',
    explanation: 'This approach detects the cycle formed by the duplicate number. Time complexity: O(n), Space complexity: O(1). Other methods like sorting (O(n log n) time) or using a Set (O(n) space) exist.',
  },
  // Strings
  {
    id: 'q-str-1',
    topicId: 'topic-strings',
    questionText: 'Check if a string is a palindrome.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Use two pointers, one at the start and one at the end. Compare characters moving inwards. Ignore non-alphanumeric characters if required.',
  },
  {
    id: 'q-str-2',
    topicId: 'topic-strings',
    questionText: 'Find the first non-repeating character in a string.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Use a hash map (or an array if character set is limited) to count character frequencies. Iterate through the string again to find the first character with a count of 1.',
    explanation: 'Requires two passes through the string or one pass to build the map and another pass through the map keys. Time complexity: O(n), Space complexity: O(k) where k is the number of unique characters (or constant for fixed alphabet size).',
  },
  // Linked Lists
  {
    id: 'q-ll-1',
    topicId: 'topic-linkedlist',
    questionText: 'Reverse a singly linked list.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Iterate through the list, changing the `next` pointer of each node to point to the previous node. Keep track of `prev`, `current`, and `next` nodes.',
  },
  {
    id: 'q-ll-2',
    topicId: 'topic-linkedlist',
    questionText: 'Detect a cycle in a linked list.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Use Floyd\'s Tortoise and Hare algorithm. Have two pointers, one moving one step at a time (tortoise) and the other moving two steps at a time (hare). If they meet, there is a cycle.',
  },
  {
    id: 'q-ll-3',
    topicId: 'topic-linkedlist',
    questionText: 'Merge two sorted linked lists.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Create a dummy head node. Iterate through both lists, comparing nodes and appending the smaller one to the merged list. Attach the remainder of the non-empty list at the end.',
  },
  // Add more questions for other topics (e.g., Trees, Graphs)
  {
    id: 'q-tree-1', // Example Tree Question
    topicId: 'topic-trees', // Assuming a topic-trees exists or is added
    questionText: 'Perform an in-order traversal of a Binary Search Tree (BST).',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Recursively traverse the left subtree, visit the root node, then recursively traverse the right subtree.',
    explanation: 'In-order traversal visits nodes in ascending order for a BST.'
  },
   {
    id: 'q-graph-1', // Example Graph Question
    topicId: 'topic-graphs', // Assuming a topic-graphs exists or is added
    questionText: 'Explain Breadth-First Search (BFS) for a graph.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Start at a source node, explore all its neighbors at the present depth level before moving on to nodes at the next depth level. Typically uses a queue.',
    explanation: 'BFS is useful for finding the shortest path in unweighted graphs.'
  },
   {
    id: 'q-graph-2', 
    topicId: 'topic-graphs', 
    questionText: 'Explain Depth-First Search (DFS) for a graph.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Start at a source node, explore as far as possible along each branch before backtracking. Typically uses recursion or a stack.',
    explanation: 'DFS is useful for topological sorting, finding connected components.'
  },
  {
    id: 'q-tree-2', 
    topicId: 'topic-trees', 
    questionText: 'What is a Binary Heap?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'A Binary Heap is a complete binary tree which satisfies the heap property: in a min heap, for any given node C, if P is a parent node of C, then the key (the value) of P is less than or equal to the key of C. In a max heap, the key of P is greater than or equal to the key of C.',
    explanation: 'Used for implementing priority queues.'
  },
  {
    id: 'q-sort-1', 
    topicId: 'topic-sorting', 
    questionText: 'Describe the time and space complexity of Merge Sort.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Time Complexity: O(n log n) in all cases (worst, average, best). Space Complexity: O(n) due to the auxiliary space required for merging.',
  },
  {
     id: 'q-search-1', 
    topicId: 'topic-searching', 
    questionText: 'When is Binary Search applicable?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Binary Search is applicable only on sorted arrays or lists. It works by repeatedly dividing the search interval in half.',
  },
  {
    id: 'q-dp-1', 
    topicId: 'topic-dynamic-programming', 
    questionText: 'Explain the concept of memoization in dynamic programming.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Memoization is an optimization technique where you store the results of expensive function calls and return the cached result when the same inputs occur again. It avoids recomputing results for previously solved subproblems.',
  }
];

// --- System Design ---

export const systemDesignTopics: StudyTopic[] = [
  {
    id: 'topic-sd-basics',
    name: 'Fundamentals & Concepts',
    section: 'System Design',
    description: 'Core principles like Scalability, Availability, Consistency.',
    status: 'Not Started',
    questionCount: 11, // Updated count
    completedCount: 0,
  },
  {
    id: 'topic-sd-large-scale',
    name: 'Designing Large-Scale Systems',
    section: 'System Design',
    description: 'Case studies like designing Twitter, Uber, etc.',
    status: 'Not Started',
    questionCount: 6, // Updated count
    completedCount: 0,
  },
  {
    id: 'topic-sd-api',
    name: 'API Design',
    section: 'System Design',
    description: 'Principles of designing robust APIs (REST, GraphQL).',
    status: 'Not Started',
    questionCount: 3, // Correct count
    completedCount: 0,
  },
];

export const systemDesignQuestions: StudyQuestion[] = [
  {
    id: 'q-sd-1',
    topicId: 'topic-sd-basics',
    questionText: 'Explain the CAP theorem.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'CAP theorem states that it is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees: Consistency, Availability, and Partition Tolerance.',
    explanation: 'Systems usually choose between CP (Consistency and Partition Tolerance, sacrificing Availability) or AP (Availability and Partition Tolerance, sacrificing Consistency).',
  },
  {
    id: 'q-sd-2',
    topicId: 'topic-sd-basics',
    questionText: 'What is the difference between horizontal and vertical scaling?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Vertical scaling (scaling up) means increasing the resources (CPU, RAM) of a single server. Horizontal scaling (scaling out) means adding more servers to distribute the load.',
    explanation: 'Horizontal scaling is generally preferred for large-scale applications due to better fault tolerance and potentially lower costs, though it adds complexity.',
  },
  {
    id: 'q-sd-3',
    topicId: 'topic-sd-large-scale',
    questionText: 'Design a basic URL shortening service like TinyURL.',
    difficulty: 'Hard',
    isCompleted: false,
    answer: 'Core components: 1. Service to generate a unique short key for a long URL (e.g., hashing + collision resolution or a distributed counter). 2. Datastore (e.g., NoSQL DB like Cassandra or DynamoDB) to map short keys to long URLs. 3. Web server to handle redirection (HTTP 301/302) from short URL to long URL. Considerations: Scalability, Availability, Read/Write ratio, Key generation strategy, Analytics.',
  },
  {
    id: 'q-sd-4',
    topicId: 'topic-sd-basics',
    questionText: 'What is load balancing and why is it used?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Load balancing distributes incoming network traffic across multiple servers to ensure no single server becomes overwhelmed. It improves responsiveness, availability, and reliability.',
    explanation: 'Common algorithms include Round Robin, Least Connections, IP Hash.'
  },
  {
    id: 'q-sd-5',
    topicId: 'topic-sd-large-scale',
    questionText: 'Outline the high-level design for an Instagram-like feed.',
    difficulty: 'Hard',
    isCompleted: false,
    answer: 'Key aspects: 1. Feed Generation (Push vs. Pull model, fan-out on write). 2. Storage (User data, photos/videos, metadata, relationships - SQL/NoSQL mix). 3. Caching (Redis/Memcached for feeds, user sessions, metadata). 4. Content Delivery Network (CDN) for media. 5. Scalable APIs (REST/GraphQL). 6. Asynchronous processing for uploads, notifications.',
  },
  {
    id: 'q-sd-6',
    topicId: 'topic-sd-basics',
    questionText: 'What is database sharding?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Sharding is a database partitioning technique that splits a large database into smaller, faster, more manageable parts called shards. Each shard holds a portion of the data, often based on a shard key.',
    explanation: 'Improves performance and scalability for very large datasets.'
  },
  {
    id: 'q-sd-7',
    topicId: 'topic-sd-basics',
    questionText: 'What is caching? Describe common caching strategies.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Caching stores frequently accessed data in a faster layer (like memory) to reduce latency. Strategies: Cache-Aside (app checks cache first, then DB), Read-Through (cache library handles DB fetch), Write-Through (writes go to cache and DB simultaneously), Write-Behind (writes go to cache, then asynchronously to DB).',
  },
  {
    id: 'q-sd-8',
    topicId: 'topic-sd-basics',
    questionText: 'Explain the concept of a Content Delivery Network (CDN).',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A CDN is a geographically distributed network of proxy servers and data centers. It serves static content (images, videos, CSS, JS) from edge locations closer to the user, reducing latency and server load.',
  },
  {
    id: 'q-sd-9',
    topicId: 'topic-sd-large-scale',
    questionText: 'How would you design a system to handle rate limiting for an API?',
    difficulty: 'Hard',
    isCompleted: false,
    answer: 'Use algorithms like Token Bucket or Leaky Bucket. Store request counts/timestamps per user/API key (e.g., in Redis). Implement middleware to check limits before processing requests. Return HTTP 429 (Too Many Requests) if limit exceeded. Consider distributed rate limiting for scalability.',
  },
   {
    id: 'q-sd-10',
    topicId: 'topic-sd-basics',
    questionText: 'What are microservices?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'An architectural style that structures an application as a collection of small, independent, and loosely coupled services. Each service focuses on a specific business capability and can be developed, deployed, and scaled independently.',
  },
  {
    id: 'q-sd-11',
    topicId: 'topic-sd-basics',
    questionText: 'What is the purpose of a message queue (e.g., RabbitMQ, Kafka)?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Message queues enable asynchronous communication between services. They decouple producers and consumers, improve fault tolerance (messages persist if consumer is down), and help manage load spikes.',
  },
   {
    id: 'q-sd-12',
    topicId: 'topic-sd-large-scale',
    questionText: 'Design the data model for a simple e-commerce site (Products, Users, Orders).',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Users (user_id, name, email, password_hash), Products (product_id, name, description, price, stock_quantity), Orders (order_id, user_id, order_date, total_amount, status), OrderItems (order_item_id, order_id, product_id, quantity, price_at_time_of_order). Use appropriate relationships (e.g., one-to-many User->Orders, many-to-many Orders<->Products via OrderItems).',
  },
   {
    id: 'q-sd-13',
    topicId: 'topic-sd-basics',
    questionText: 'What is eventual consistency?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'A consistency model used in distributed systems where, if no new updates are made to a given data item, all accesses to that item will eventually return the last updated value. It prioritizes availability over immediate consistency.',
  },
   {
    id: 'q-sd-14',
    topicId: 'topic-sd-basics',
    questionText: 'Differentiate between SQL and NoSQL databases.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'SQL databases are relational (structured data, tables, predefined schema, ACID properties). NoSQL databases are non-relational (flexible schema, various data models like key-value, document, column-family, graph), often prioritizing scalability and availability (BASE properties).',
  },
   {
    id: 'q-sd-15',
    topicId: 'topic-sd-large-scale',
    questionText: 'How can you ensure high availability for a web application?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Use redundancy at multiple levels: multiple web servers behind a load balancer, multiple database replicas (master-slave or multi-master), deploying across multiple availability zones or regions, automated failover mechanisms.',
  },
  {
    id: 'q-sd-16',
    topicId: 'topic-sd-large-scale',
    questionText: 'How would you design a distributed cache?',
    difficulty: 'Hard',
    isCompleted: false,
    answer: 'Considerations: Data partitioning (sharding), Replication for fault tolerance, Consistency model (e.g., eventual), Eviction policy (LRU, LFU), Cache invalidation strategy, Client library/proxy for routing requests.',
  },
  {
    id: 'q-sd-17',
    topicId: 'topic-sd-basics',
    questionText: 'What is idempotency and why is it important in distributed systems?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'An operation is idempotent if making the same request multiple times produces the same result as making it once. Important for reliability, especially with network issues or retries, preventing unintended side effects (e.g., charging a credit card multiple times).',
  },
  {
    id: 'q-sd-18',
    topicId: 'topic-sd-api',
    questionText: 'Compare REST and GraphQL.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'REST: Resource-based, uses standard HTTP methods (GET, POST, PUT, DELETE), multiple endpoints, can lead to over/under-fetching. GraphQL: Query language for APIs, single endpoint, client specifies required data, prevents over/under-fetching, strongly typed schema.',
  },
  {
    id: 'q-sd-19',
    topicId: 'topic-sd-api',
    questionText: 'What are common authentication methods for APIs?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'API Keys, Basic Auth (Username/Password - less secure), OAuth 2.0 (delegated authorization), JWT (JSON Web Tokens), OpenID Connect (authentication built on OAuth 2.0).',
  },
  {
    id: 'q-sd-20',
    topicId: 'topic-sd-api',
    questionText: 'What is API versioning and why is it needed?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Managing changes to an API without breaking existing clients. Allows introducing breaking changes in new versions while maintaining older versions. Common strategies: URI path versioning (/v1/, /v2/), Query parameter versioning (?version=1), Header versioning (Accept: application/vnd.company.v1+json).',
  }
];

// --- HR Questions ---

// HR questions might not need topics, just a list.
export const hrQuestions: StudyQuestion[] = [
   {
    id: 'q-hr-1',
    topicId: 'hr-general', // Use a generic topicId or omit if not needed by component
    questionText: 'Tell me about yourself.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Structure: Present (current role/activities), Past (relevant experience), Future (career goals related to the job). Keep it concise (1-2 minutes) and relevant to the position.',
  },
  {
    id: 'q-hr-2',
    topicId: 'hr-general',
    questionText: 'What are your strengths and weaknesses?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Strengths: Choose 2-3 relevant strengths with specific examples. Weaknesses: Choose a genuine weakness you are actively working on improving, explain the steps you are taking.',
  },
   {
    id: 'q-hr-3',
    topicId: 'hr-general',
    questionText: 'Why do you want to work for this company?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Research the company (mission, values, recent news, products). Connect your skills, experience, and career goals to the company and the specific role. Show genuine interest.',
  },
  {
    id: 'q-hr-4',
    topicId: 'hr-general',
    questionText: 'Where do you see yourself in 5 years?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Focus on growth, learning, and contributing within the context of the company/role. Show ambition but keep it realistic and aligned with potential career paths.',
  },
  {
    id: 'q-hr-5',
    topicId: 'hr-general',
    questionText: 'Describe a challenging situation you faced and how you handled it.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Use the STAR method: Situation (describe the context), Task (what was required), Action (what steps *you* took), Result (what was the outcome, what did you learn?).',
  },
  {
    id: 'q-hr-6',
    topicId: 'hr-general',
    questionText: 'Do you have any questions for me?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Always prepare 2-3 thoughtful questions about the role, team, company culture, or challenges. Shows engagement and interest. Avoid asking about salary/benefits initially unless prompted.',
  },
  {
    id: 'q-hr-7',
    topicId: 'hr-general',
    questionText: 'Why should we hire you?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Summarize your key relevant skills, experience, and accomplishments. Match them directly to the job requirements. Express enthusiasm for the role and company. Highlight your unique value proposition.',
  },
  {
    id: 'q-hr-8',
    topicId: 'hr-general',
    questionText: 'Describe a time you failed. What did you learn?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Choose a real but not catastrophic failure. Focus on taking responsibility, the specific actions you took to address it, and most importantly, what you learned and how you applied that learning later.',
  },
  {
    id: 'q-hr-9',
    topicId: 'hr-general',
    questionText: 'How do you handle stress or pressure?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Mention specific, healthy coping mechanisms (e.g., prioritizing tasks, taking short breaks, exercise, focusing on solutions). Provide a brief example if possible.',
  },
  {
    id: 'q-hr-10',
    topicId: 'hr-general',
    questionText: 'Describe a time you worked effectively as part of a team.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Use the STAR method. Focus on your specific contributions, collaboration, communication, and achieving a shared goal.',
  },
  {
    id: 'q-hr-11',
    topicId: 'hr-general',
    questionText: 'How do you stay updated with industry trends?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Mention specific resources: online publications, blogs, podcasts, conferences, online courses, professional networks, personal projects.',
  },
  {
    id: 'q-hr-12',
    topicId: 'hr-general',
    questionText: 'What are your salary expectations?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Research typical salary ranges for the role, location, and your experience level. Provide a range rather than a specific number if possible. You can also defer the discussion until later in the process.',
  },
  {
    id: 'q-hr-13',
    topicId: 'hr-general',
    questionText: 'Describe a time you had to deal with a difficult colleague.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Focus on professionalism, communication, finding common ground, and resolving the issue constructively. Avoid blaming or excessive negativity.',
  },
  {
    id: 'q-hr-14',
    topicId: 'hr-general',
    questionText: 'What motivates you?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Be genuine. Connect your motivators (e.g., problem-solving, learning, achieving results, collaboration) to the aspects of the job and company culture.',
  },
  {
    id: 'q-hr-15',
    topicId: 'hr-general',
    questionText: 'Why are you leaving your current job? (If applicable)',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Be positive or neutral. Focus on seeking new opportunities, growth, or a better fit with your career goals. Avoid speaking negatively about your previous employer or colleagues.',
  },
  {
    id: 'q-hr-16',
    topicId: 'hr-general',
    questionText: 'How do you handle disagreements with your manager?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Focus on respectful communication. Understand their perspective, clearly articulate your viewpoint with supporting reasons/data, seek common ground, and ultimately respect the final decision while expressing concerns professionally if necessary.',
  },
  {
    id: 'q-hr-17',
    topicId: 'hr-general',
    questionText: 'Describe a time you took initiative.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Use the STAR method. Describe a situation where you identified a problem or opportunity without being asked, took ownership, implemented a solution or improvement, and achieved a positive result.',
  },
  {
    id: 'q-hr-18',
    topicId: 'hr-general',
    questionText: 'What kind of work environment do you prefer?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Be honest but align your answer with what you know about the company culture (e.g., collaborative, fast-paced, independent). Focus on aspects that enable you to be productive and contribute effectively.',
  },
  {
    id: 'q-hr-19',
    topicId: 'hr-general',
    questionText: 'How do you prioritize your work?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Mention methods like assessing urgency and importance (e.g., Eisenhower Matrix), understanding deadlines, clarifying expectations with stakeholders, using tools (to-do lists, project management software), and adapting to changing priorities.',
  },
  {
    id: 'q-hr-20',
    topicId: 'hr-general',
    questionText: 'Tell me about a time you had to learn something quickly.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Use the STAR method. Describe the situation requiring rapid learning, the steps you took to acquire the knowledge/skill (resources used, approach), how you applied it, and the outcome.',
  }
];

// --- Core Subjects ---

export const coreSubjectsTopics: StudyTopic[] = [
  {
    id: 'topic-os',
    name: 'Operating Systems',
    section: 'Core Subjects',
    description: 'Memory management, processes, threads, concurrency.',
    status: 'Not Started',
    questionCount: 6, // Updated count
    completedCount: 0,
  },
   {
    id: 'topic-dbms',
    name: 'Database Management Systems',
    section: 'Core Subjects',
    description: 'SQL, NoSQL, normalization, transactions.',
    status: 'Not Started',
    questionCount: 7, // Correct count
    completedCount: 0,
  },
  {
    id: 'topic-networking',
    name: 'Computer Networks',
    section: 'Core Subjects',
    description: 'TCP/IP, UDP, HTTP, DNS, OSI Model.',
    status: 'Not Started',
    questionCount: 7, // Correct count
    completedCount: 0,
  },
];

export const coreSubjectsQuestions: StudyQuestion[] = [
  {
    id: 'q-os-1',
    topicId: 'topic-os',
    questionText: 'What is the difference between a process and a thread?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A process is an instance of a program with its own memory space. A thread is a unit of execution within a process, sharing the process\'s memory space. Threads within a process are lighter-weight than creating new processes.',
  },
  {
    id: 'q-os-2',
    topicId: 'topic-os',
    questionText: 'What is virtual memory?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Virtual memory is a memory management technique that provides an "idealized abstraction of the storage resources". It creates the illusion for users of a very large main memory by using disk space as an extension of RAM.',
  },
  {
    id: 'q-dbms-1',
    topicId: 'topic-dbms',
    questionText: 'What is database normalization?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Normalization is the process of organizing data in a database to reduce redundancy and improve data integrity. It involves dividing larger tables into smaller, well-structured tables and defining relationships between them (e.g., 1NF, 2NF, 3NF).',
  },
  {
    id: 'q-dbms-2',
    topicId: 'topic-dbms',
    questionText: 'What are ACID properties in the context of database transactions?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Atomicity (all operations complete or none do), Consistency (transaction brings DB from one valid state to another), Isolation (concurrent transactions don\'t interfere), Durability (committed changes persist).',
  },
  {
    id: 'q-nw-1', // Example Networking Question
    topicId: 'topic-networking', // Assuming a topic-networking exists or is added
    questionText: 'Explain the difference between TCP and UDP.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'TCP (Transmission Control Protocol) is connection-oriented, reliable (guarantees delivery, order), and uses flow/congestion control. UDP (User Datagram Protocol) is connectionless, unreliable (best-effort delivery), and faster due to less overhead.',
    explanation: 'TCP is used for web browsing, email. UDP is used for streaming, DNS, online games.'
  },
  {
    id: 'q-os-3',
    topicId: 'topic-os',
    questionText: 'What is a deadlock?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'A deadlock is a situation where two or more processes are blocked forever, each waiting for a resource held by another process in the set. Requires four conditions: Mutual Exclusion, Hold and Wait, No Preemption, Circular Wait.',
  },
  {
    id: 'q-os-4',
    topicId: 'topic-os',
    questionText: 'What is context switching?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'The process of storing the state of a process or thread so that it can be restored and resume execution later. This allows multiple processes to share a single CPU.',
  },
  {
    id: 'q-os-5',
    topicId: 'topic-os',
    questionText: 'Explain different CPU scheduling algorithms (e.g., FCFS, SJF, Round Robin).',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'FCFS (First-Come, First-Served): Simple, non-preemptive. SJF (Shortest Job First): Optimal average waiting time, can be preemptive or non-preemptive, requires knowing burst time. Round Robin: Preemptive, each process gets a small time quantum.',
  },
  {
    id: 'q-os-6',
    topicId: 'topic-os',
    questionText: 'What is the purpose of an operating system?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Manages computer hardware and software resources, provides common services for computer programs, acts as an intermediary between the user and the hardware.',
  },
  {
    id: 'q-dbms-3',
    topicId: 'topic-dbms',
    questionText: 'What is an index in a database?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A data structure (like a B-tree) that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index structure.',
  },
  {
    id: 'q-dbms-4',
    topicId: 'topic-dbms',
    questionText: 'Explain the difference between Primary Key and Foreign Key.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Primary Key: Uniquely identifies each record in a table. Foreign Key: A field in one table that uniquely identifies a row of another table, establishing a link between them.',
  },
  {
    id: 'q-dbms-5',
    topicId: 'topic-dbms',
    questionText: 'What is a database transaction?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A sequence of operations performed as a single logical unit of work. Transactions must adhere to ACID properties.',
  },
  {
    id: 'q-dbms-6',
    topicId: 'topic-dbms',
    questionText: 'Write a basic SQL query to select all columns from a table named "Users".',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'SELECT * FROM Users;',
  },
   {
    id: 'q-dbms-7',
    topicId: 'topic-dbms',
    questionText: 'What does SQL stand for?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Structured Query Language.',
  },
  {
    id: 'q-nw-2',
    topicId: 'topic-networking',
    questionText: 'What is the purpose of DNS?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Domain Name System (DNS) translates human-readable domain names (like www.google.com) into machine-readable IP addresses (like 172.217.160.142).',
  },
  {
    id: 'q-nw-3',
    topicId: 'topic-networking',
    questionText: 'Explain the layers of the OSI model.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: '7 layers: Physical (bits), Data Link (frames, MAC), Network (packets, IP), Transport (segments/datagrams, TCP/UDP), Session (dialog control), Presentation (data format, encryption), Application (HTTP, FTP, SMTP).',
  },
  {
    id: 'q-nw-4',
    topicId: 'topic-networking',
    questionText: 'What is an IP address?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A unique numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication. (e.g., IPv4, IPv6).',
  },
  {
    id: 'q-nw-5',
    topicId: 'topic-networking',
    questionText: 'What is HTTP?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Hypertext Transfer Protocol. The foundation of data communication for the World Wide Web. Defines how messages are formatted and transmitted.',
  },
  {
    id: 'q-nw-6',
    topicId: 'topic-networking',
    questionText: 'Difference between HTTP and HTTPS?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'HTTPS (HTTP Secure) uses TLS/SSL encryption to secure the communication between the client and the server, protecting against eavesdropping and tampering.',
  },
  {
    id: 'q-nw-7',
    topicId: 'topic-networking',
    questionText: 'What is a MAC address?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Media Access Control address. A unique identifier assigned to a network interface controller (NIC) for use as a network address in communications within a network segment (Data Link Layer).',
  }
];

// --- Others ---

export const otherTopics: StudyTopic[] = [
  {
    id: 'topic-git',
    name: 'Git & Version Control',
    section: 'Others',
    description: 'Common Git commands, branching, merging.',
    status: 'Not Started',
    questionCount: 10, // Correct count
    completedCount: 0,
  },
  {
    id: 'topic-problem-solving',
    name: 'General Problem Solving',
    section: 'Others',
    description: 'Logic puzzles, estimation, basic algorithms.',
    status: 'Not Started',
    questionCount: 10, // Correct count
    completedCount: 0,
  },
];

export const otherQuestions: StudyQuestion[] = [
  // Git
  {
    id: 'q-oth-1',
    topicId: 'topic-git',
    questionText: 'What is Git?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A distributed version control system used for tracking changes in source code during software development.',
  },
  {
    id: 'q-oth-2',
    topicId: 'topic-git',
    questionText: 'What is the difference between `git pull` and `git fetch`?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: '`git fetch` downloads changes from the remote repository but doesn\'t integrate them into your local working branch. `git pull` does `git fetch` followed by `git merge` (or `git rebase`) to integrate the changes.',
  },
  {
    id: 'q-oth-3',
    topicId: 'topic-git',
    questionText: 'What is a `git merge` conflict?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Occurs when Git cannot automatically resolve differences in code between two commits being merged (e.g., changes made to the same line in both branches). Requires manual intervention.',
  },
  {
    id: 'q-oth-4',
    topicId: 'topic-git',
    questionText: 'Explain `git rebase`.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Reapplies commits from one branch onto the tip of another branch. Creates a linear history, often used before merging a feature branch into main.',
  },
  {
    id: 'q-oth-5',
    topicId: 'topic-git',
    questionText: 'What is `HEAD` in Git?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A reference pointer that usually points to the currently checked-out branch or commit. Represents the state of your working directory.',
  },
  {
    id: 'q-oth-6',
    topicId: 'topic-git',
    questionText: 'How do you undo the last commit?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: '`git reset --soft HEAD~1` (keeps changes staged), `git reset --mixed HEAD~1` (keeps changes in working dir, unstaged - default), `git reset --hard HEAD~1` (discards changes). Use with caution, especially `--hard`.',
  },
  {
    id: 'q-oth-7',
    topicId: 'topic-git',
    questionText: 'What is `.gitignore`?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A file that specifies intentionally untracked files that Git should ignore (e.g., build artifacts, log files, dependency folders like node_modules).',
  },
  {
    id: 'q-oth-8',
    topicId: 'topic-git',
    questionText: 'What is the purpose of `git stash`?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Temporarily shelves (stashes) changes you\'ve made to your working directory so you can switch branches or work on something else, and then re-apply them later.',
  },
  {
    id: 'q-oth-9',
    topicId: 'topic-git',
    questionText: 'Difference between `git clone` and `git fork` (on platforms like GitHub)?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: '`git clone` creates a local copy of an existing remote repository. `fork` (platform feature) creates a server-side copy of a repository under your own account, allowing you to propose changes (Pull Requests) back to the original.',
  },
  {
    id: 'q-oth-10',
    topicId: 'topic-git',
    questionText: 'What is a Git branch?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'An independent line of development. Allows you to work on features or fixes without affecting the main codebase (e.g., `main` or `master` branch).',
  },
  // Problem Solving
  {
    id: 'q-oth-11',
    topicId: 'topic-problem-solving',
    questionText: 'How many golf balls can fit in a school bus?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'This is a Fermi problem (estimation). Break it down: Estimate bus volume (L*W*H), estimate golf ball volume (sphere formula), account for packing density (random packing ~64%). Calculate ratio.',
    explanation: 'Focus is on the logical process, assumptions, and calculation, not the exact number.'
  },
  {
    id: 'q-oth-12',
    topicId: 'topic-problem-solving',
    questionText: 'You have 8 balls, one is slightly heavier. Using a balance scale, find the minimum weighings to identify the heavy ball.',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: '2 weighings. Weigh 3 vs 3. If equal, the heavy ball is one of the remaining 2 (weigh them). If unequal, take the heavier group of 3, weigh 1 vs 1 from that group. If equal, the unweighed one is heavy; if unequal, the scale indicates the heavy one.',
  },
  {
    id: 'q-oth-13',
    topicId: 'topic-problem-solving',
    questionText: 'Why are manhole covers round?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'A round cover cannot fall through its circular opening, regardless of orientation. Square/rectangular covers could fall in if turned diagonally.',
  },
  {
    id: 'q-oth-14',
    topicId: 'topic-problem-solving',
    questionText: 'Estimate the number of piano tuners in Chicago.',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Fermi problem. Estimate Chicago population -> households -> pianos per household -> tuning frequency -> tuner workload (tunings/day, days/year) -> calculate total tuners needed.',
    explanation: 'Again, process over precision.'
  },
  {
    id: 'q-oth-15',
    topicId: 'topic-problem-solving',
    questionText: 'You have two ropes that each take exactly 1 hour to burn from end to end. They don\'t burn uniformly. How can you measure 45 minutes?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: '1. Light both ends of Rope A and one end of Rope B simultaneously. 2. Rope A will burn completely in 30 minutes. 3. At the moment Rope A burns out, light the *other* end of Rope B. 4. Since Rope B had 30 minutes left and is now burning from both ends, it will take 15 more minutes to burn completely. Total time = 30 + 15 = 45 minutes.',
  },
  {
    id: 'q-oth-16',
    topicId: 'topic-problem-solving',
    questionText: 'How would you test a standard calculator?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Test cases: Basic operations (+, -, *, /), zero (division by zero, operations with zero), negative numbers, decimals, order of operations (PEMDAS/BODMAS), large numbers, edge cases (max/min values), clear functions (C, CE), memory functions (M+, M-, MR, MC).',
  },
  {
    id: 'q-oth-17',
    topicId: 'topic-problem-solving',
    questionText: 'A bat and a ball cost $1.10 in total. The bat costs $1.00 more than the ball. How much does the ball cost?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: '$0.05 (5 cents). Let B = bat cost, L = ball cost. B + L = 1.10. B = L + 1.00. Substitute: (L + 1.00) + L = 1.10 => 2L + 1.00 = 1.10 => 2L = 0.10 => L = 0.05.',
  },
  {
    id: 'q-oth-18',
    topicId: 'topic-problem-solving',
    questionText: 'How would you design an algorithm to find if a word is an anagram of another?',
    difficulty: 'Beginner',
    isCompleted: false,
    answer: 'Method 1: Sort both strings alphabetically. If the sorted strings are identical, they are anagrams. Method 2: Use a frequency map (e.g., hash map or array for ASCII) to count character occurrences in the first string, then decrement counts for characters in the second string. If all counts end up at zero and lengths are equal, they are anagrams.',
  },
  {
    id: 'q-oth-19',
    topicId: 'topic-problem-solving',
    questionText: 'You are given a function `rand7()` that generates a random integer from 1 to 7. How would you implement `rand10()` using `rand7()`?',
    difficulty: 'Hard',
    isCompleted: false,
    answer: 'Use rejection sampling. Generate a number in a larger range uniformly using `rand7()`. (rand7() - 1) * 7 + rand7() generates a number from 1 to 49 uniformly. If the generated number is > 40, reject it and try again. Otherwise, return (number - 1) % 10 + 1. This gives a uniform distribution from 1 to 10.',
  },
  {
    id: 'q-oth-20',
    topicId: 'topic-problem-solving',
    questionText: 'How do you find the middle element of a singly linked list in one pass?',
    difficulty: 'Intermediate',
    isCompleted: false,
    answer: 'Use two pointers: a slow pointer and a fast pointer. Start both at the head. Move the slow pointer one step at a time and the fast pointer two steps at a time. When the fast pointer reaches the end of the list (or null), the slow pointer will be at the middle element.',
  }
];
